583. Delete Operation for Two Strings


class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        
        int[][] dp = new int[m + 1][n + 1];
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        int lcsLength = dp[m][n];
        return (m - lcsLength) + (n - lcsLength);
    }
}


553. Optimal Division


class Solution {
    public String optimalDivision(int[] nums) {
        int n = nums.length;
        
        if (n == 1) {
            return String.valueOf(nums[0]);
        }     
        if (n == 2) {
            return nums[0] + "/" + nums[1];
        }       
        StringBuilder sb = new StringBuilder();
        sb.append(nums[0]).append("/(");    
        for (int i = 1; i < n; i++) {
            sb.append(nums[i]);
            if (i != n - 1) {
                sb.append("/");
            }
        }
        sb.append(")");     
        return sb.toString();
    }
}


646. Maximum Length of Pair Chain


class Solution {
    public int findLongestChain(int[][] pairs) {
        int n = pairs.length;
        
        Arrays.sort(pairs, (a, b) -> a[0] - b[0]);
        
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int maxChain = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (pairs[j][1] < pairs[i][0]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxChain = Math.max(maxChain, dp[i]);
        } 
        return maxChain;
    }
}
