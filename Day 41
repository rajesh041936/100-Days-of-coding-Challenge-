40. Combination Sum II

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) 
    {
        List<List<Integer>> result= new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(candidates,0,target,new ArrayList<>(),result);
        return result;
    }
    private void backtrack(int[] candidates,int start,int target,List<Integer> temp,List<List<Integer>> result){
        if(target==0){
            result.add(new ArrayList<>(temp));
            return ;
        }

        for(int i=start;i<candidates.length;i++){

            if(i>start && candidates[i]==candidates[i-1]) continue;

            if(candidates[i]>target) break;

            temp.add(candidates[i]);
            backtrack(candidates,i+1,target - candidates[i],temp,result);
            temp.remove(temp.size()-1);
        }
    }
}

216. Combination Sum III

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(1, k, n, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int start, int k, int target, List<Integer> temp, List<List<Integer>> result) {
        if (temp.size() == k && target == 0) {
            result.add(new ArrayList<>(temp));
            return;
        }
        
        if (temp.size() > k || target < 0) return;

        for (int i = start; i <= 9; i++) {
            temp.add(i);
            backtrack(i + 1, k, target - i, temp, result);
            temp.remove(temp.size() - 1);
        }
    }
}


486. Predict the Winner

class Solution {
    public boolean predictTheWinner(int[] nums) {
        int n = nums.length;
        Integer[][] memo = new Integer[n][n];
        return helper(nums, 0, n - 1, memo) >= 0;
    }

    private int helper(int[] nums, int start, int end, Integer[][] memo) {
        if (start == end) return nums[start];
        if (memo[start][end] != null) return memo[start][end];

        int pickStart = nums[start] - helper(nums, start + 1, end, memo);
        int pickEnd = nums[end] - helper(nums, start, end - 1, memo);

        memo[start][end] = Math.max(pickStart, pickEnd);
        return memo[start][end];
    }
}

