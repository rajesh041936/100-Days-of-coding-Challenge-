98. Validate Binary Search Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return validate(root, null, null);
    }

    private boolean validate(TreeNode node, Long min, Long max) {
        if (node == null) return true;

        long val = node.val;

        if (min != null && val <= min) return false;
        if (max != null && val >= max) return false;

        return validate(node.left, min, val) &&
               validate(node.right, val, max);
    }
}


501. Find Mode in Binary Search Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private Integer prev = null;
    private int count = 0;
    private int maxCount = 0;
    private List<Integer> modes = new ArrayList<>();

    public int[] findMode(TreeNode root) {
        inorder(root);

        int[] result = new int[modes.size()];
        for (int i = 0; i < modes.size(); i++) {
            result[i] = modes.get(i);
        }
        return result;
    }

    private void inorder(TreeNode node) {
        if (node == null) return;

        inorder(node.left);

        if (prev == null || node.val != prev) {
            count = 1;
        } else {
            count++;
        }

        if (count > maxCount) {
            maxCount = count;
            modes.clear();
            modes.add(node.val);
        } else if (count == maxCount) {
            modes.add(node.val);
        }

        prev = node.val;

        inorder(node.right);
    }
}


863. All Nodes Distance K in Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> ans = new ArrayList<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        find(root,target,k);
        return ans;
    }

    public int find(TreeNode root, TreeNode target, int k){
        if(root==null) return -1;
        if(root==target){
            dfs(root,k);
            return 1;
        } 
        int l = find(root.left,target,k);
        if(l>0){
            dfs(root.right,k-l-1);
            if(l==k) ans.add(root.val);
            return l +1;
        }
        int r = find(root.right,target,k);
        if(r>0){
            dfs(root.left,k-1-r);
            if(r==k)ans.add(root.val);
            return r+1;
        }
        return -1;
    }

    void dfs(TreeNode n,int k){
       if(n==null || k<0) return;

       if(k==0){
        ans.add(n.val);
        return;
       }

       dfs(n.left,k-1);
       dfs(n.right,k-1);
    }
}

