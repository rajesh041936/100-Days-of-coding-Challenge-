905. Sort Array By Parity

class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int[] result = new int[nums.length];
        int start=0;
        int end=nums.length-1;

        for(int num:nums){
            if(num %2==0){
                result[start++]=num;
            }
            else{
                result[end--]=num;
            }
        }
        return result;
    }
}

775. Global and Local Inversions

class Solution {
    public boolean isIdealPermutation(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (Math.abs(nums[i] - i) > 1) {
                return false;
            }
        }
        return true;
    }
}


1051. Height Checker

class Solution {
    public int heightChecker(int[] heights) {
        int[] expected=heights.clone();
        Arrays.sort(expected);
        int count =0;
        for(int i =0;i<heights.length;i++){
            if(expected[i]!=heights[i]){
                count++;
            }
        }
        return count;
    }
}
