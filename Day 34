90. Subsets II

  class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> subset = new ArrayList<>();
    public List<List<Integer>> subsetsWithDup(int[] nums) 
    {
        Arrays.sort(nums);
        method(0,nums);
        return result;       
    }

    private void method(int index,int[] nums){
        result.add(new ArrayList<>(subset));

        for(int i =index;i<nums.length;i++){

            if(i>index && nums[i]==nums[i-1]) continue;

            subset.add(nums[i]);
            method(i+1,nums);
            subset.remove(subset.size()-1);
        }
    }
}

29. Divide Two Integers

  class Solution {
    public int divide(int dividend, int divisor) {
        if(dividend == Integer.MIN_VALUE && divisor == -1 ) {
            return Integer.MAX_VALUE;
        }

        boolean sign = ((dividend < 0) == (divisor < 0)) ;

        long n = Math.abs((long) dividend);
        long d = Math.abs((long) divisor);
        int ans = 0;

        while(n >= d) {
            int cnt =0;
            while(n >= (d <<(cnt+1))) {
                cnt++;
            }
            ans += 1 << cnt;
            n -= d << cnt;
        }

        return sign ? ans :-ans;
    }
}

137. Single Number II

  class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;

        for (int i = 0; i < 32; i++) {
            int bitSum = 0;

            for (int num : nums) {
                if (((num >> i) & 1) == 1) {
                    bitSum++;
                }
            }

            if (bitSum % 3 != 0) {
                result |= (1 << i);
            }
        }

        return result;
    }
}
