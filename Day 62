104. Maximum Depth of Binary Tree


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) 
    {
        if(root ==null){
            return 0;
        }
        int left=maxDepth(root.left);
        int right=maxDepth(root.right);

        return 1+Math.max(left,right);
        
    }
}


108. Convert Sorted Array to Binary Search Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) 
    {
        return Build(nums,0,nums.length-1);
        
    }
    private TreeNode Build(int[] nums,int left,int right){
        if(left>right) return null;

        int mid=left+(right-left)/2;

        TreeNode root=new TreeNode(nums[mid]);

        root.left=Build(nums,left,mid-1);
        root.right=Build(nums,mid+1,right);

        return root;
    }
}

110. Balanced Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) 
    {
        return check(root)!=-1 ;
        
    }
    private int check(TreeNode node){
        if(node==null) return 0;

        int left=check(node.left);
        if(left==-1) return -1;

        int right=check(node.right);
        if(right==-1) return -1;

        if(Math.abs(left-right)>1 ) return -1;

        return 1+Math.max(left,right);
    }

}
