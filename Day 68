662. Maximum Width of Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxwidth=0;
    List<Integer> res = new ArrayList<>();
    public void dfs(TreeNode root, int lvl, int idx){
        if(root==null){
            return;
        }
        if(res.size()==lvl){
            res.add(idx);
        }
        maxwidth = Math.max(maxwidth, idx-res.get(lvl)+1);
        dfs(root.left, lvl+1, idx*2);
        dfs(root.right, lvl+1, idx*2+1);
    }
    public int widthOfBinaryTree(TreeNode root) {
        dfs(root, 0, 1);
        return maxwidth;
    }
}

331. Verify Preorder Serialization of a Binary Tree

class Solution {
    public boolean isValidSerialization(String preorder) {
        String[] nodes = preorder.split(",");
        int slots = 1;
        for (String node : nodes) {
            if (slots == 0) return false;
            if (node.equals("#")) {
                slots--;
            } else {
                slots--; 
                slots += 2;
            }
        }
        return slots == 0;
    }
}


1367. Linked List in Binary Tree

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean isSubPath(ListNode head, TreeNode root) {
        if (root == null) return false;
        return checkPath(root, head);
    }

    private boolean checkPath(TreeNode node, ListNode head) {
        if (node == null) return false;
        if (dfs(node, head)) return true; 
        return checkPath(node.left, head) || checkPath(node.right, head);
    }

    private boolean dfs(TreeNode node, ListNode head) {
        if (head == null) return true; 
        if (node == null) return false; 
        if (node.val != head.val) return false;
        return dfs(node.left, head.next) || dfs(node.right, head.next);
    }
}
