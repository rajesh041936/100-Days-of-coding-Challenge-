406. Queue Reconstruction by Height


class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, (a, b) -> {
            if (b[0] != a[0]) {
                return b[0] - a[0];
            } else {
                return a[1] - b[1];
            }
        });
        List<int[]> queue = new LinkedList<>();
        for (int[] person : people) {
            queue.add(person[1], person);
        }
        return queue.toArray(new int[people.length][]);
    }
}


729. My Calendar I


class MyCalendar {
    private TreeMap<Integer, Integer> calendar;

    public MyCalendar() {
        calendar = new TreeMap<>();
    }
    public boolean book(int start, int end) {
        Integer prev = calendar.floorKey(start);
        Integer next = calendar.ceilingKey(start);
        if ((prev == null || calendar.get(prev) <= start) && (next == null || end <= next)) {
            calendar.put(start, end);
            return true;
        }
        return false;
    }
}


/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * boolean param_1 = obj.book(startTime,endTime);
 */

731. My Calendar II


class MyCalendarTwo {
    private List<int[]> books;
    private List<int[]> overlaps;

    public MyCalendarTwo() {
        books = new ArrayList<>();
        overlaps = new ArrayList<>();
    }

    public boolean book(int start, int end) {
        for (int[] interval : overlaps) {
            if (start < interval[1] && end > interval[0]) {
                return false;
            }
        }
        for (int[] interval : books) {
            if (start < interval[1] && end > interval[0]) {
                overlaps.add(new int[]{Math.max(start, interval[0]), Math.min(end, interval[1])});
            }
        }
        books.add(new int[]{start, end});
        return true;
    }
}


/**
 * Your MyCalendarTwo object will be instantiated and called as such:
 * MyCalendarTwo obj = new MyCalendarTwo();
 * boolean param_1 = obj.book(startTime,endTime);
 */
