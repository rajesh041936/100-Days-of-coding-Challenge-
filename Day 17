769. Max Chunks To Make Sorted

class Solution {
    public int maxChunksToSorted(int[] arr) 
    {
        int max= 0;
        int chunk=0;

        for(int i =0;i<arr.length;i++){
            max=Math.max(max,arr[i]);
            if(max==i){
                chunk++;
            }
        }

        return chunk;
    }
}

565. Array Nesting

class Solution {
    public int arrayNesting(int[] nums)
    {
        int n = nums.length;
        int max=0;
        boolean[] ans = new boolean[n];

        for(int i =0;i<n;i++){
            if(!ans[i]){
                int count=0;
                int temp =i;
                while(!ans[temp]){
                    ans[temp]=true;
                    temp=nums[temp];
                    count++;
                }
                max =Math.max(max,count);
            }
        }
        return max;
    }
}

765. Couples Holding Hands

class Solution {
    public int minSwapsCouples(int[] row) {
        int n = row.length;
        int swaps = 0;
        int[] pos = new int[n];

        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }

        for (int i = 0; i < n; i += 2) {
            int first = row[i];
            int partner = first ^ 1;

            if (row[i + 1] != partner) {
                swaps++;
                int partnerIndex = pos[partner];

                pos[row[i + 1]] = partnerIndex;
                pos[partner] = i + 1;

                int temp = row[i + 1];
                row[i + 1] = row[partnerIndex];
                row[partnerIndex] = temp;
            }
        }

        return swaps;
    }
}
