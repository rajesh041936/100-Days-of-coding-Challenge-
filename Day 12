153. Find Minimum in Rotated Sorted Array

class Solution {
    public int findMin(int[] nums) {
        int left =0;
        int right = nums.length-1;

        while(left < right){
            int mid =left+(right-left)/2;
            if(nums[mid]>nums[right]){
                left =mid+1;
            }
            else{
                right=mid;
            }
        }
        return nums[left];
    }
}

81. Search in Rotated Sorted Array II

class Solution {
    public boolean search(int[] nums, int target) 
    {
        int left =0;
        int right=nums.length-1;

        while(left <=right){
            int mid = left+(right -left)/2;
            if(nums[mid]==target){
                return true;
            }
            else if(nums[mid]==nums[left] && nums[mid]==nums[right]){
                left++;
                right--;
            }
            else if(nums[left]<=nums[mid]){
                if(nums[left]<=target && target <nums[mid]){
                    right=mid-1;
                }
                else{
                    left =mid+1;
                }
            }
            else{
                if(nums[mid]<target && target <= nums[right]){
                    left =mid+1;
                }
                else{
                    right = mid-1;
                }
            }
        }
        return false;
        
    }
}

719. Find K-th Smallest Pair Distance

class Solution {
    public int smallestDistancePair(int[] nums, int k) 
    {
        Arrays.sort(nums);
        int low =0;
         int high =nums[nums.length-1]-nums[0];

         while (low < high){
            int mid = low+(high - low)/2;

            int count = countpairwithmaxdist(nums , mid);

            if(count >=k){
                high = mid;
            }
            else{
                low = mid+1;
            }
         }
         return low;
        
    }
    private int countpairwithmaxdist(int[] nums,int max){
        int count =0;
        int left =0;

        for(int right = 0;right<nums.length;right++){
            while(nums[right]-nums[left]>max){
                left++;
            }
            count +=right-left;
        }
        return count;
    }
}
