1721. Swapping Nodes in a Linked List

class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        ListNode first = head;

        for (int i = 1; i < k; i++) {
            first = first.next;
        }

        ListNode firstposition = first;

        ListNode second = head;
        ListNode temp = first.next;
        while (temp != null) {
            temp = temp.next;
            second = second.next;
        }

        int tempval = firstposition.val;
        firstposition.val = second.val;
        second.val = tempval;

        return head;
    }
}


2. Add Two Numbers

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode dummy=new ListNode(0);
        ListNode current=dummy;

        int carry=0;

        while(l1!= null || l2!=null || carry!=0){
            int sum=carry;

            if(l1!=null){
                sum+=l1.val;
                l1=l1.next;;
            }
            if(l2!=null){
                sum+=l2.val;
                l2=l2.next;
            }
            int digit=sum%10;
            carry=sum/10;

            current.next=new ListNode(digit);
            current=current.next;
        }
        return dummy.next;
    }
}

328. Odd Even Linked List

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) return head;

        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenhead = even;

        while (even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;

            even.next = odd.next;
            even = even.next;
        }

        odd.next = evenhead;
        return head;
    }
}

