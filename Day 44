238. Product of Array Except Self

class Solution {
  public static int[] productExceptSelf(int[] nums) {
    int[] res = new int[nums.length];
    int product = 1;

    for (int i = 0; i < nums.length; i++) {
      res[i] = product;
      product *= nums[i];
    }

    product = 1;

    for (int i = nums.length - 1; i >= 0; i--) {
      res[i] *= product;
      product *= nums[i];
    }

    return res;
  }
}

43. Multiply Strings

class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) return "0";

        int n = num1.length(), m = num2.length();
        int[] result = new int[n + m];

        for (int i = n - 1; i >= 0; i--) {
            int digit1 = num1.charAt(i) - '0';

            for (int j = m - 1; j >= 0; j--) {
                int digit2 = num2.charAt(j) - '0';

                int product = digit1 * digit2;
                int pos1 = i + j, pos2 = i + j + 1;

                int sum = product + result[pos2];

                result[pos2] = sum % 10;
                result[pos1] += sum / 10;
            }
        }

        StringBuilder sb = new StringBuilder();
        for (int r : result) {
            if (sb.length() == 0 && r == 0) continue;
            sb.append(r);
        }

        return sb.toString();
    }
}


343. Integer Break

class Solution {
    public int integerBreak(int n) 
    {
        if(n==2) return 1;
        if(n==3) return 2;

        int product=1;
        while(n>4){
            product*=3;
            n-=3;
        }
        return product*n;
        
    }
}
