145. Binary Tree Postorder Traversal

  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) 
    {
        List<Integer> result=new ArrayList<>();
        Postorder(root,result);
        return result;
        
    }
    private void Postorder(TreeNode node,List<Integer> result){
        if(node==null) return;

        Postorder(node.left,result);
        Postorder(node.right,result);
        result.add(node.val);
    }
}

226. Invert Binary Tree

  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) 
    {
        if(root==null) return null;

        TreeNode temp=root.left;
        root.left=root.right;
        root.right=temp;      

        invertTree(root.left);
        invertTree(root.right);

        return root;
    }
}

257. Binary Tree Paths

  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<>();
        if (root != null) {
            Paths(root, "", result);
        }
        return result;
    }

    private void Paths(TreeNode node, String path, List<String> result) {
        if (node != null) {
            path += node.val;

            if (node.left == null && node.right == null) {
                result.add(path);
            } else {
                path += "->";
                Paths(node.left, path, result);
                Paths(node.right, path, result);
            }
        }
    }
}
