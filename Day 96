2932. Maximum Strong Pair XOR I


class Solution {
    public int maximumStrongPairXor(int[] nums) {
        int max=0;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if((nums[i]^nums[j])>max && Math.abs(nums[i]-nums[j])<=Math.min(nums[i],nums[j]))
                    max=nums[i]^nums[j];
            }
        }
        return max;
    }
}

2760. Longest Even Odd Subarray With Threshold


class Solution {
    public int longestAlternatingSubarray(int[] nums, int threshold) {
      int res = 0, curr = 0;

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > threshold) {
                curr = 0;
                continue;
            }
            if (curr == 0) {
                if (nums[i] % 2 == 0) {
                    curr = 1;
                    res = Math.max(res, curr);
                }
            } else {
                if (nums[i] % 2 != nums[i - 1] % 2) {
                    curr++;
                    res = Math.max(res, curr);
                } else {
                    curr = (nums[i] % 2 == 0) ? 1 : 0;
                    res = Math.max(res, curr);
                }
            }
        }
        return res;
    }
}

2379. Minimum Recolors to Get K Consecutive Black Blocks


class Solution {
    public int minimumRecolors(String blocks, int k) {
        int n = blocks.length();
        int minChanges = Integer.MAX_VALUE;
        int whiteCount = 0;
        for (int i = 0; i < k; i++) {
            if (blocks.charAt(i) == 'W') {
                whiteCount++;
            }
        }
        minChanges = whiteCount;
        for (int i = k; i < n; i++) {
            if (blocks.charAt(i - k) == 'W') {
                whiteCount--;
            }
            if (blocks.charAt(i) == 'W') {
                whiteCount++;
            }
            minChanges = Math.min(minChanges, whiteCount);
        }
        return minChanges;
    }
}
