3174. Clear Digits

class Solution {
    public String clearDigits(String s) {
        StringBuilder ans = new StringBuilder();
        
        for (char ch : s.toCharArray()) {
            if (Character.isLetter(ch)) {
                ans.append(ch);
            } else {
                if (ans.length() > 0) {
                    ans.deleteCharAt(ans.length() - 1);
                }
            }
        }

        return ans.toString();
    }
}


2073. Time Needed to Buy Tickets

class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        int time = 0;
        for (int i = 0; i < tickets.length; i++) {
            if (i <= k) {
                time += Math.min(tickets[i], tickets[k]);
            } else {
                time += Math.min(tickets[i], tickets[k] - 1);
            }
        }
        return time;
    }
}


2696. Minimum String Length After Removing Substrings

class Solution {
    public int minLength(String s) {
        StringBuilder ans = new StringBuilder();

        for (char ch : s.toCharArray()) {
            int n = ans.length();
            if (n > 0) {
                char top = ans.charAt(n - 1);
                if ((top == 'A' && ch == 'B') || (top == 'C' && ch == 'D')) {
                    ans.deleteCharAt(n - 1); 
                    continue;  
                }
            }
            ans.append(ch);  
        }

        return ans.length();
    }
}
