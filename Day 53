19. Remove Nth Node From End of List

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode first = dummy;
        ListNode second = dummy;

        for (int i = 0; i <= n; i++) {
            first = first.next;
        }

        while (first != null) {
            first = first.next;
            second = second.next;
        }

        second.next = second.next.next;

        return dummy.next;
    }
}


92. Reverse Linked List II

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) 
    {
        ListNode dummy=new ListNode(0);
        dummy.next=head;

        ListNode prev=dummy;

        for(int i=1;i<left;i++){
            prev=prev.next;
        } 
        ListNode curr=prev.next;
        ListNode next=null;
        for(int i=0;i<right-left;i++){
            next=curr.next;
            curr.next=next.next;
            next.next=prev.next;
            prev.next=next;
        }      
        return dummy.next; 
    }
}


61. Rotate List

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) {
            return head;
        }

        ListNode tail = head;
        int length = 1;
        while (tail.next != null) {
            tail = tail.next;
            length++;
        }

        tail.next = head;

        int rotateSteps = k % length;
        int skipLength = length - rotateSteps;

        ListNode newTail = head;
        for (int i = 1; i < skipLength; i++) {
            newTail = newTail.next;
        }

        ListNode newHead = newTail.next;
        newTail.next = null; 

        return newHead;
    }
}

