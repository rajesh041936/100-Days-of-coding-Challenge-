704. Binary Search

class Solution {
    public int search(int[] nums, int target)
    {
        int left =0;
        int right =nums.length-1;
        if(nums.length==0){
            return -1;
        }
        while(left <= right){
                int mid = left+(right -left)/2;

        if(nums[mid]<target){
            left =mid+1;
        }
        else if(nums[mid]>target){
            right=mid-1;
        }
        else{
            return mid;
        } 
     }  
        return -1;
    }
}

35. Search Insert Position

class Solution {
    public int searchInsert(int[] nums, int target) 
    {
        int left =0;
        int right =nums.length-1;
        if(nums.length==0){
            return -1;
        }
        while(left <= right){
                int mid = left+(right -left)/2;

        if(nums[mid]<target){
            left =mid+1;
        }
        else if(nums[mid]>target){
            right=mid-1;
        }
        else{
            return mid;
        } 
     }  
        return left;
        
    }

}

34. Find First and Last Position of Element in Sorted Array

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = findBound(nums, target, true);
        int last = findBound(nums, target, false);
        return new int[]{first, last};
    }

    private int findBound(int[] nums, int target, boolean isFirst) {
        int left = 0;
        int right = nums.length - 1;
        int bound = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                bound = mid;
                if (isFirst) {
                    right = mid - 1; 
                } else {
                    left = mid + 1; 
                }
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return bound;
    }
}
