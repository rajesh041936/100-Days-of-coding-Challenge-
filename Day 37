494. Target Sum

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int total = 0;
        for (int num : nums) total += num;

        if ((target + total) % 2 != 0 || total < Math.abs(target)) return 0;

        int sum = (target + total) / 2;
        int[] dp = new int[sum + 1];
        dp[0] = 1;

        for (int num : nums) {
            for (int j = sum; j >= num; j--) {
                dp[j] += dp[j - num];
            }
        }

        return dp[sum];
    }
}


39. Combination Sum

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) 
    {
          List<List<Integer>> result= new ArrayList<>();
          backtrack(candidates,target,0,new ArrayList<>(),result);
          return result;
    }
    private void backtrack(int[] candidates,int target,int start,List<Integer> current,List<List<Integer>> result){
        if(target ==0){
            result.add(new ArrayList(current));
            return;
        }
        if(target<0){
            return;
        }
        for(int i=start;i<candidates.length;i++){
            current.add(candidates[i]);
            backtrack(candidates,target-candidates[i],i,current,result);
            current.remove(current.size()-1);
        }
    }
}

79. Word Search

class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length, n = board[0].length;

        for (int i = 0; i < m; i++) {         
            for (int j = 0; j < n; j++) {         
                if (dfs(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, String word, int i, int j, int idx) {
        if (idx == word.length()) return true;

        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length 
            || board[i][j] != word.charAt(idx)) return false;

        char temp = board[i][j];
        board[i][j] = '#';

        boolean found = dfs(board, word, i + 1, j, idx + 1) ||
                        dfs(board, word, i - 1, j, idx + 1) ||
                        dfs(board, word, i, j + 1, idx + 1) ||
                        dfs(board, word, i, j - 1, idx + 1);

        board[i][j] = temp;
        return found;
    }
}
