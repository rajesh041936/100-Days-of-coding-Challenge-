1984. Minimum Difference Between Highest and Lowest of K Scores


import java.util.Arrays;

class Solution {
    public int minimumDifference(int[] nums, int k) {
        if (k == 1) return 0;  
        Arrays.sort(nums); 
        int minDiff = Integer.MAX_VALUE;
        
        for (int i = 0; i <= nums.length - k; i++) {
            int diff = nums[i + k - 1] - nums[i];
            minDiff = Math.min(minDiff, diff);
        }
        return minDiff;
    }
}


1876. Substrings of Size Three with Distinct Characters

class Solution {
    public int countGoodSubstrings(String s) {
        int count = 0;
        
        for (int i = 0; i < s.length() - 2; i++) {
            char a = s.charAt(i);
            char b = s.charAt(i + 1);
            char c = s.charAt(i + 2);
            
            if (a != b && a != c && b != c) {
                count++;
            }
        }
        return count;
    }
}


2269. Find the K-Beauty of a Number


class Solution {
    public int divisorSubstrings(int num, int k) {
        String str = String.valueOf(num);
        int count = 0;
        
        for (int i = 0; i <= str.length() - k; i++) {
            String sub = str.substring(i, i + k);
            int val = Integer.parseInt(sub);
            
            if (val != 0 && num % val == 0) {
                count++;
            }
        }    
        return count;
    }
}
