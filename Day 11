74. Search a 2D Matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) 
    {
        int m=matrix.length;
        int n=matrix[0].length;
        
        int low = 0;
        int high =m*n-1;


        while(low<=high){
            int mid = low+(high-low)/2;

            int row =mid/n;
            int col=mid%n;

            if(matrix[row][col]== target){
                return true;
            }
            else if(matrix[row][col]<target){
                low =mid+1;
            }
            else{
                high = mid-1;
            }
        }

        return false;
    }
}

240. Search a 2D Matrix II

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m =matrix.length;
        int n =matrix[0].length;

        int row =0;
        int col =n-1;

        while(row < m && col >=0){
            if(matrix[row][col]==target){
                return true;
            }
            else if(matrix[row][col]>target){
                col--;
            }
            else{
                row++;
            }
        }
        return false;
    }
}

378. Kth Smallest Element in a Sorted Matrix

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int low =matrix[0][0];
        int high=matrix[n-1][n-1];

        while(low<high){
            int mid = low+(high -low)/2;
            int count =countlessequal(matrix , mid, n);

            if(count <k){
                low =mid+1;
            }
            else{
                high =mid;
            }
        }
        return low;
    }
        private int countlessequal(int[][] matrix,int mid,int n){
            int count =0;
            int row=n-1;
            int col=0;

            while(row>=0 && col<n){
                if(matrix[row][col]<=mid){
                    count +=row+1;
                    col++;
                }
                else{
                    row--;
                }
            
        }
        return count;
    }
}
