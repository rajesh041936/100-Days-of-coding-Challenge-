852. Peak Index in a Mountain Array

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int left =0;
        int right = arr.length-1;

        while (left <right){
            int mid = left+(right - left)/2;

            if(arr[mid]<arr[mid+1]){
                left =mid+1;
            }
            else{
                right =mid;
            }
        }
        return left;
    }
}

33. Search in Rotated Sorted Array

class Solution {
    public int search(int[] nums, int target) 
    {
        int left =0;
        int right =nums.length-1;

        while(left <=right){
            int mid = left+(right-left)/2;
            if(nums[mid]==target)
            return mid;


            if(nums[left]<=nums[mid]){
                if(nums[left]<= target && target <nums[mid]){
                    right =mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            else{
                if(nums[mid]<target && target <= nums[right]){
                    left =mid+1;

                }else{
                    right=mid-1;
                }
            }
        }
        return -1;
        
    }
}

1095. Find in Mountain Array

/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr)
    {
        int n =mountainArr.length();

        int low=0;
        int high =n-1;

        while(low <high){
            int mid = low+(high-low)/2;
            if(mountainArr.get(mid)<mountainArr.get(mid+1)){
                low=mid+1;
            }
            else{
                high = mid;
            }
        }
        int peak =low;

        int index = binarysearch( mountainArr,0,peak,target,true);
        if(index != -1){
            return index;
        }
        return binarysearch( mountainArr,peak+1,n-1,target,false);
    }
    int binarysearch(MountainArray mountainArr,int low,int high,int target,boolean ascending){
        while(low <=high){
            int mid = low+(high-low)/2;
            int val =mountainArr.get(mid);
            if(val == target){
                return mid;
            }
            if(ascending){
                if(val < target){
                    low =mid+1;
                }
                else{
                    high =mid-1;
                }
            }
            else{
                if(val <target){
                    high =mid-1;
                }
                else{
                    low=mid+1;
                }
            }
        }
        return -1;
    }
}
