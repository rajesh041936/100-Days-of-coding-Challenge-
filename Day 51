141. Linked List Cycle

class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) return false;

        ListNode slow = head;
        ListNode fast = head.next;

        while (fast != null && fast.next != null) {
            if (slow == fast) return true; 
            slow = slow.next;
            fast = fast.next.next;
        }

        return false; 
    }
}


83. Remove Duplicates from Sorted List

class Solution {
    public ListNode deleteDuplicates(ListNode head) 
    {
        ListNode curr=head;

        while(curr!=null && curr.next!=null){
            if(curr.val == curr.next.val) curr.next=curr.next.next;
            else curr=curr.next;
           
        }
        return head;
    }
}

203. Remove Linked List Elements

class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if (head != null){
            
            if (head.val != val){
                head.next = removeElements(head.next,val);
                return head;
            } else{
                head = removeElements(head.next,val);
                return head;
            }
        }
        return head;
    }
}
