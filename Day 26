202. Happy Number

class Solution {
    public boolean isHappy(int n) 
    {
         Set<Integer> num = new HashSet<>();
         while(n !=1 && !num.contains(n)){
            num.add(n);
            n=getsum(n);
         } 
         return n==1;
    }
    static int getsum(int n){
        int sum=0;
        while(n > 0){
            int digit=n%10;
            sum +=digit*digit;
            n = n/10;
        }
        return sum;
    }

}

342. Power of Four


class Solution {
    public boolean isPowerOfFour(int n) {
        if (n <= 0) return false;

        if ((n & (n - 1)) != 0) return false;

        return (n & 0x55555555) != 0;
    }
}


628. Maximum Product of Three Numbers

class Solution {
    public int maximumProduct(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        int product1 = nums[n-1]*nums[n-2]*nums[n-3];
        int product2=nums[0]*nums[1]*nums[n-1];
        return Math.max(product1,product2);

        
    }
}
